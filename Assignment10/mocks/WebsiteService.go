// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "github.com/AlgorithmChopda/Website-Checker.git/internal"
	mock "github.com/stretchr/testify/mock"
)

// WebsiteService is an autogenerated mock type for the WebsiteService type
type WebsiteService struct {
	mock.Mock
}

// CheckWebsiteStatus provides a mock function with given fields: ctx
func (_m *WebsiteService) CheckWebsiteStatus(ctx context.Context) {
	_m.Called(ctx)
}

// GetAllWebsiteStatus provides a mock function with given fields:
func (_m *WebsiteService) GetAllWebsiteStatus() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllWebsiteStatus")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetWebsiteStatus provides a mock function with given fields: url
func (_m *WebsiteService) GetWebsiteStatus(url string) (internal.Status, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetWebsiteStatus")
	}

	var r0 internal.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (internal.Status, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) internal.Status); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(internal.Status)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingWebsite provides a mock function with given fields: url
func (_m *WebsiteService) PingWebsite(url string) {
	_m.Called(url)
}

// ReadWebsite provides a mock function with given fields: urls
func (_m *WebsiteService) ReadWebsite(urls internal.WebsiteRequestObject) {
	_m.Called(urls)
}

// NewWebsiteService creates a new instance of WebsiteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsiteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsiteService {
	mock := &WebsiteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
